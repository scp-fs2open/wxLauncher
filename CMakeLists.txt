cmake_minimum_required(VERSION 2.8)
project(wxlauncher CXX)
SET(VERSION_MAJOR 0)
SET(VERSION_MINOR 7)
SET(VERSION_PATCH 3)

SET(CMAKE_OSX_ARCHITECTURES i386)

find_package(wxWidgets 2.8.10
  REQUIRED base core net xml html adv qa richtext)
  
if(NOT PYTHON_EXECUTABLE)
  # Only try to find python iff not already given
  include(FindPythonInterp) #PYTHON_EXECUTABLE
endif()

find_program(HG_EXECUTABLE hg)

option(onlinehelpmaker_debug "Have the onlinehelpmaker.py script output debug information" OFF)
if(onlinehelpmaker_debug)
  SET(HELPMAKER_DEBUG "-d")
  SET(HELPMAKER_QUIET "")
else(onlinehelpmaker_debug)
  SET(HELPMAKER_DEBUG "")
  option(onlinehelpmaker_quiet "Have onlinehelpmaker.py produce even less output than normal" ON)
  if(onlinehelpmaker_quiet)
    SET(HELPMAKER_QUIET "-q")
  else()
    SET(HELPMAKER_QUIET "")
  endif()
endif(onlinehelpmaker_debug)

SET(helphtblocation ${CMAKE_CURRENT_BINARY_DIR}/generated/onlinehelp.htb)
option(DEVELOPMENT_MODE "Doing development (cannot build installer in this mode)" OFF)
if(DEVELOPMENT_MODE)
  SET(HELP_HTB_LOCATION ${helphtblocation})
  SET(RESOURCES_PATH ${PROJECT_SOURCE_DIR}/resources)
else(DEVELOPMENT_MODE)
  if(WIN32)
    SET(RESOURCES_PATH resources)
    SET(HELP_HTB_LOCATION onlinehelp.htb)
  else()
    SET(RESOURCES_PATH /usr/local/share/wxlauncher/)
    SET(HELP_HTB_LOCATION /usr/local/share/wxlauncher/onlinehelp.htb)
  endif()
endif(DEVELOPMENT_MODE)

OPTION(USE_SPEECH "Build launcher with speech support?" OFF)
OPTION(USE_JOYSTICK "Build launcher with joystick support (currently windows MM only)?" OFF)
OPTION(USE_OPENAL "Build launcher with OpenAL support?" ON)
if(USE_OPENAL)
  find_package(OpenAL REQUIRED)
  INCLUDE_DIRECTORIES(${OPENAL_INCLUDE_DIR})
endif(USE_OPENAL)

if(UNIX)
  find_package(SDL REQUIRED)
  INCLUDE_DIRECTORIES(${SDL_INCLUDE_DIR})
  SET(HAS_SDL true)
endif()

INCLUDE(${wxWidgets_USE_FILE})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_SOURCE_DIR}/code)
if(WIN32) # helper is only needed on windows
add_executable(registry_helper WIN32
  code/apis/RegistryProfileManager.cpp platform/win32/registry_helper.cpp)
SET_TARGET_PROPERTIES(registry_helper
  PROPERTIES LINKER_LANGUAGE CXX)
  SET_TARGET_PROPERTIES(registry_helper PROPERTIES LINK_FLAGS /MANIFESTUAC:NO)
TARGET_LINK_LIBRARIES(registry_helper ${wxWidgets_LIBRARIES})
endif()

# Check to see if we have a HG executable so that we will be able to
# generate the version.cpp.  If we don't have a hg binary, notify and
# create the target to copy a template version.
if(HG_EXECUTABLE)
  add_custom_target(version.cpp.maker ALL
    COMMAND ${PYTHON_EXECUTABLE} scripts/version.cpp.maker.py build ${CMAKE_CURRENT_BINARY_DIR}/generated/version_strings.cpp ${CMAKE_CURRENT_BINARY_DIR}/version.cpp.maker.temp --hgpath=${HG_EXECUTABLE}
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
else()
  add_custom_target(version.cpp.maker ALL
    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_SOURCE_DIR}/code/global/version_strings.cpp.in ${CMAKE_CURRENT_BINARY_DIR}/generated/version_strings.cpp)
  MESSAGE( "Cannot find a commandline Mercurial client (hg).  version_strings.cpp will be generated by copying a dummy file.") 
endif()

SET_DIRECTORY_PROPERTIES(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES ${CMAKE_CURRENT_BINARY_DIR}/generated/version_strings.cpp)

add_custom_target(helpmaker ALL
  COMMAND ${PYTHON_EXECUTABLE} scripts/onlinehelpmaker.py build  ${helphtblocation} ${CMAKE_SOURCE_DIR}/onlinehelp ${HELPMAKER_QUIET} ${HELPMAKER_DEBUG} -t ${CMAKE_CURRENT_BINARY_DIR}/onlinehelpmaker -c ${CMAKE_CURRENT_BINARY_DIR}/generated/helplinks.cpp
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
SET_DIRECTORY_PROPERTIES(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES ${CMAKE_CURRENT_BINARY_DIR}/generated/helplinks.cpp)
SET_DIRECTORY_PROPERTIES(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES ${helphtblocation})
file(GLOB_RECURSE helpmaker_temp_files ${CMAKE_CURRENT_BINARY_DIR}/onlinehelpmaker/*.*)
SET_SOURCE_FILES_PROPERTIES(${helphtblocation} ${CMAKE_CURRENT_BINARY_DIR}/generated/helplinks.cpp ${CMAKE_CURRENT_BINARY_DIR}/generated/version_strings.cpp PROPERTIES GENERATED true EXTERNAL_OBJECT true)

if(WIN32)
SET(WIN32_PROFILE_MANAGER code/apis/RegistryProfileManager.cpp)
else()
SET(WIN32_PROFILE_MANAGER code/apis/FileProfileManager.cpp)
endif()
SET(TAB_CODE_FILES
  code/tabs/AdvSettingsPage.h
  code/tabs/AdvSettingsPage.cpp
  code/tabs/BasicSettingsPage.h
  code/tabs/BasicSettingsPage.cpp
  code/tabs/InstallPage.h
  code/tabs/InstallPage.cpp
  code/tabs/ModsPage.h
  code/tabs/ModsPage.cpp
  code/tabs/WelcomePage.h
  code/tabs/WelcomePage.cpp
  )
SOURCE_GROUP(Tabs FILES ${TAB_CODE_FILES})
SET(GUI_CONTROL_CODE_FILES
  code/controls/BottomButtons.h
  code/controls/BottomButtons.cpp
  code/controls/FlagList.h
  code/controls/FlagList.cpp
  code/controls/Logger.h
  code/controls/Logger.cpp
  code/controls/ModList.h
  code/controls/ModList.cpp
  code/controls/StatusBar.h
  code/controls/StatusBar.cpp
  )
SOURCE_GROUP("GUI Controls" FILES ${GUI_CONTROL_CODE_FILES})
SET(GLOBAL_CODE_FILES
  code/global/configure_launcher.h.in
  ${CMAKE_CURRENT_BINARY_DIR}/generated/configure_launcher.h
  code/global/ids.h
  code/global/MemoryDebugging.h
  code/global/targetver.h
  code/global/version.h
  code/global/version.cpp
)
SOURCE_GROUP(Global FILES ${GLOBAL_CODE_FILES})
SET(DATASTRUCTURE_CODE_FILES
  code/datastructures/FlagInfo.cpp
  code/datastructures/FSOExecutable.h
  code/datastructures/FSOExecutable.cpp
  )
SOURCE_GROUP("Data Structures" FILES ${DATASTRUCTURE_CODE_FILES})
SET(API_CODE_FILES
  code/apis/HelpManager.h
  code/apis/HelpManager.cpp
  code/apis/JoystickManager.h
  code/apis/JoystickManager.cpp
  code/apis/OpenALManager.h
  code/apis/OpenALManager.cpp
  code/apis/ProfileManager.h
  code/apis/ProfileManager.cpp
  code/apis/SkinManager.h
  code/apis/SkinManager.cpp
  code/apis/SpeechManager.h
  code/apis/SpeechManager.cpp
  code/apis/TCManager.h
  code/apis/TCManager.cpp
  code/apis/PlatformProfileManager.h
  ${WIN32_PROFILE_MANAGER}
  )
SOURCE_GROUP(Apis FILES ${API_CODE_FILES})
SET(RESOURCE_FILES
  platform/win32/wxlauncher.rc
  ${CMAKE_CURRENT_BINARY_DIR}/generated/version_strings.cpp
  ${CMAKE_CURRENT_BINARY_DIR}/generated/helplinks.cpp
  ${helphtblocation}
  )
SOURCE_GROUP(Resources FILES ${RESOURCE_FILES})
SET(CODE_FILES
  code/MainWindow.h
  code/MainWindow.cpp
  code/wxLauncherApp.h
  code/wxLauncherApp.cpp
  )
SOURCE_GROUP("Main Code Files" FILES ${CODE_FILES})

add_executable(wxlauncher WIN32 MACOSX_BUNDLE
  ${TAB_CODE_FILES}
  ${GUI_CONTROL_CODE_FILES}
  ${GLOBAL_CODE_FILES}
  ${DATASTRUCTURE_CODE_FILES}
  ${API_CODE_FILES}
  ${RESOURCE_FILES}
  ${CODE_FILES}
  )
SET_TARGET_PROPERTIES(wxlauncher
  PROPERTIES LINKER_LANGUAGE CXX)
# Files that are not to be complied directly
SET_SOURCE_FILES_PROPERTIES(
  ${CMAKE_CURRENT_BINARY_DIR}/generated/helplinks.cpp   
  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/onlinehelp.htb 
  ${CMAKE_CURRENT_BINARY_DIR}/generated/configure_launcher.h 
  code/datastructures/FlagInfo.cpp
  code/global/configure_launcher.h.in
  PROPERTIES HEADER_FILE_ONLY true)
ADD_DEPENDENCIES(wxlauncher helpmaker version.cpp.maker)
if(WIN32)
ADD_DEPENDENCIES(wxlauncher registry_helper)
endif(WIN32)

CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/code/global/configure_launcher.h.in
  ${CMAKE_CURRENT_BINARY_DIR}/generated/configure_launcher.h)

foreach(temp_file ${helpmaker_temp_files})
  SET_DIRECTORY_PROPERTIES(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES ${temp_file})
endforeach(temp_file)

TARGET_LINK_LIBRARIES(wxlauncher ${wxWidgets_LIBRARIES} ${SDL_LIBRARY})

# packaging
SET(LAUNCHER_CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR}/cmake)

if(DEVELOPMENT_MODE)
  MESSAGE( "Development mode is set. Building of installers is not allowed.  Set DEVELOPMENT_MODE=OFF to build installers.")
  CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/cmake/FailCPack.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/CPackConfig.cmake COPYONLY)
  CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/cmake/FailCPack.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/CPackSourceConfig.cmake COPYONLY)
else()
  INCLUDE(${LAUNCHER_CMAKE_SOURCE_DIR}/wxLauncherInstaller.cmake)
endif()